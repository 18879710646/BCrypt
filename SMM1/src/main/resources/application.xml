<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">
    <context:component-scan base-package="com.org.Service"/>
    <context:property-placeholder location="classpath:db.properties"/>

    <bean  id="dataSource1" class="com.alibaba.druid.pool.DruidDataSource" >
        <property name="driverClassName" value="${jdbc.driverClass}"/>
        <property name="url"  value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
<!--
            InputStream resourceAsStream = Resources.getResourceAsStream("SqlConfig.xml");
        SqlSessionFactoryBuilder sqlSessionFactoryBuilder = new SqlSessionFactoryBuilder();
        把mybatis中创建sqlsession工厂交给Spring管理

-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean" id="factoryBean">
           <property name="dataSource" ref="dataSource1"/>
     </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="mapperScannerConfigurer">
<!--         把dao接口扫进来,进行动态代理(把接口创建实现类，然后注册到Spring容器中)-->
        <property name="basePackage" value="com.org.Dao"/>
    </bean>

        <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">
            <property name="dataSource" ref="dataSource1"></property>
        </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>

<!--&lt;!&ndash;     添加上事务管理员&ndash;&gt;-->
<!--    <bean class="org.springframework.jdbc.datasource.DataSourceTransactionManager" id="transactionManager">-->
<!--        <property name="dataSource " ref="dataSource1"/>-->
<!--    </bean>-->
<!--&lt;!&ndash;     开启事务&ndash;&gt;-->
<!--<tx:annotation-driven transaction-manager="transactionManager"/>-->
<!--    <tx:advice transaction-manager="transactionManager" id="advice">-->
<!--        <tx:attributes>-->
<!--&lt;!&ndash;       rollback-for表示为什么情况下回滚        isolation 隔离级别&ndash;&gt;-->
<!--            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Exception" isolation="DEFAULT"/>-->
<!--        </tx:attributes>-->
<!--    </tx:advice>-->
<!--    <aop:config>-->
<!--        <aop:pointcut id="point" expression="execution(* com.org.Service.*.*(..))"/>-->
<!--        <aop:advisor advice-ref="advice" pointcut-ref="point"/>-->
<!--    </aop:config>-->




</beans>